// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract TicTacToeStakes {
    enum Cell { Empty, X, O }
    enum GameState { WaitingForPlayers, InProgress, Ended }

    address public player1;
    address public player2;
    address public winner;
    address public currentPlayer;
    GameState public gameState;

    IERC20 public usdc;
    uint256 public constant ENTRY_FEE = 50 * 10**6; // 50 USDC (6 decimals)
    uint256 public constant TOTAL_BANK = 100 * 10**6;

    Cell[3][3] public board;
    uint8 public movesMade;

    uint256 public lastMoveTime;
    uint256 public constant MOVE_TIMEOUT = 10 seconds;

    uint8 public bidRound;
    mapping(uint8 => mapping(address => uint256)) public currentBids;

    event GameStarted(address indexed p1, address indexed p2);
    event BidPlaced(address indexed player, uint256 amount);
    event MoveMade(address indexed player, uint8 row, uint8 col);
    event GameEnded(address winner);
    event GameDraw();
    event PlayerTimeout(address loser);

    modifier onlyPlayers() {
        require(msg.sender == player1 || msg.sender == player2, "Not a player");
        _;
    }

    modifier inGame() {
        require(gameState == GameState.InProgress, "Game not active");
        _;
    }

    constructor(address _usdc) {
        usdc = IERC20(_usdc);
        resetGame();
    }

    function joinGame() external {
        require(gameState == GameState.WaitingForPlayers, "Game already started");
        require(msg.sender != player1, "Player1 cannot join twice");

        usdc.transferFrom(msg.sender, address(this), ENTRY_FEE);

        if (player1 == address(0)) {
            player1 = msg.sender;
        } else {
            player2 = msg.sender;
            gameState = GameState.InProgress;
            currentPlayer = player1;
            lastMoveTime = block.timestamp;
            emit GameStarted(player1, player2);
        }
    }

    function placeBid(uint256 amount) external onlyPlayers inGame {
        require(bidRound < 3, "Max bids reached");
        require(usdc.balanceOf(msg.sender) >= amount, "Insufficient USDC");
        require(currentBids[bidRound][msg.sender] == 0, "Already bid this round");

        currentBids[bidRound][msg.sender] = amount;
        emit BidPlaced(msg.sender, amount);

        address opponent = msg.sender == player1 ? player2 : player1;
        if (currentBids[bidRound][opponent] > 0) {
            finalizeBidRound();
        }
    }

    function finalizeBidRound() internal {
        uint256 bid1 = currentBids[bidRound][player1];
        uint256 bid2 = currentBids[bidRound][player2];

        if (bid1 > bid2) {
            currentPlayer = player1;
        } else if (bid2 > bid1) {
            currentPlayer = player2;
        } else {
            bidRound++;
            if (bidRound >= 3) {
                currentPlayer = random() % 2 == 0 ? player1 : player2;
            }
            return;
        }

        usdc.transferFrom(player1, address(this), bid1);
        usdc.transferFrom(player2, address(this), bid2);
        bidRound = 0;
        lastMoveTime = block.timestamp;
    }

    function makeMove(uint8 row, uint8 col) external onlyPlayers inGame {
        require(msg.sender == currentPlayer, "Not your turn");
        require(row < 3 && col < 3, "Invalid cell");
        require(board[row][col] == Cell.Empty, "Cell filled");
        require(block.timestamp <= lastMoveTime + MOVE_TIMEOUT, "Move timeout");

        board[row][col] = msg.sender == player1 ? Cell.X : Cell.O;
        movesMade++;
        lastMoveTime = block.timestamp;

        emit MoveMade(msg.sender, row, col);

        if (_checkWin()) {
            gameState = GameState.Ended;
            winner = msg.sender;
            emit GameEnded(winner);
        } else if (movesMade == 9) {
            gameState = GameState.Ended;
            emit GameDraw();
        } else {
            bidRound = 0;
        }
    }

    function claimTimeoutWin() external onlyPlayers inGame {
        require(block.timestamp > lastMoveTime + MOVE_TIMEOUT, "Still time left");
        address loser = currentPlayer;
        gameState = GameState.Ended;
        winner = msg.sender;
        emit PlayerTimeout(loser);
    }

    function resetGame() public {
        player1 = address(0);
        player2 = address(0);
        winner = address(0);
        currentPlayer = address(0);
        gameState = GameState.WaitingForPlayers;
        movesMade = 0;
        bidRound = 0;
        for (uint8 i = 0; i < 3; i++) {
            for (uint8 j = 0; j < 3; j++) {
                board[i][j] = Cell.Empty;
            }
        }
    }

    function _checkWin() internal view returns (bool) {
        for (uint8 i = 0; i < 3; i++) {
            if (board[i][0] != Cell.Empty && board[i][0] == board[i][1] && board[i][1] == board[i][2]) return true;
            if (board[0][i] != Cell.Empty && board[0][i] == board[1][i] && board[1][i] == board[2][i]) return true;
        }
        if (board[0][0] != Cell.Empty && board[0][0] == board[1][1] && board[1][1] == board[2][2]) return true;
        if (board[0][2] != Cell.Empty && board[0][2] == board[1][1] && board[1][1] == board[2][0]) return true;
        return false;
    }

    function random() internal view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)));
    }

    function getBoard() external view returns (Cell[3][3] memory) {
        return board;
    }
}
